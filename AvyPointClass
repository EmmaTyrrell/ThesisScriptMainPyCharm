

# # create feature point class for avalanche data that's consistent with HRRR model data
try:
    # run tool for XY class
    arcpy.XYTableToPoint_management(AvyTable, outAvyPointClass, xField, yField, "", GCSsr)
    print("point class created")

    # project class into proper coordinate system
    arcpy.Project_management(outAvyPointClass, projectedAvyOutPointClass, PCSsr)
    print("coordinate system projected")

    # add field for StdDate
    arcpy.AddField_management(projectedAvyOutPointClass, "StdDate", "TEXT", "", "", 11, "", "NULLABLE", "REQUIRED")
    print("field added")

    # create fields for year, month, date
    # year
    try:
        # year
        arcpy.AddField_management(projectedAvyOutPointClass, "_Year", "SHORT", "", "", 4, "_Year", "NON_NULLABLE",
                                  "REQUIRED")
        print("year calculate created")

        arcpy.CalculateField_management(projectedAvyOutPointClass, "_Year", "!Year!", "PYTHON3")
        print("year field calculated")

        # month
        arcpy.AddField_management(projectedAvyOutPointClass, "_Month", "SHORT", "", "", 2, "_Month", "NON_NULLABLE",
                                  "REQUIRED")
        print("month calculate created")

        arcpy.CalculateField_management(projectedAvyOutPointClass, "_Month", "!Month!", "PYTHON3")
        print("month field calculated")

        # day
        arcpy.AddField_management(projectedAvyOutPointClass, "_Day", "SHORT", "", "", 2, "_Day", "NON_NULLABLE",
                                  "REQUIRED")
        print("day calculate created")

        arcpy.CalculateField_management(projectedAvyOutPointClass, "_Day", "!Day!", "PYTHON3")
        print("day field calculated")
    except Exception as ex:
        print(ex)

    # calculate and clip final point class
    try:
        fc = projectedAvyOutPointClass
        fields = ["_Month", "_Day"]
        print("feature class and fields established")

        with arcpy.da.UpdateCursor(fc, fields) as cursor:
            for row in cursor:
                if row[1] < 10:
                    StdDateExpression01 = '"!_Year!" + "-" + "0" + "!_Month!" + "-" + "0" + "!_Day!"'
                    arcpy.CalculateField_management(projectedAvyOutPointClass, "StdDate", StdDateExpression01,
                                                    "PYTHON3")

                elif row[1] > 9:
                    StdDateExpression02 = '"!_Year!" + "-" + "0" + "!_Month!" + "-" + "!_Day!"'
                    arcpy.CalculateField_management(projectedAvyOutPointClass, "StdDate", StdDateExpression02,
                                                    "PYTHON3")
                cursor.updateRow(row)

        # with arcpy.da.UpdateCursor(fc, fields) as cursor:
        #     for row in cursor:
        #         if row[0] > 9 and row[1] > 9:
        #             StdDateExpression03 = '"!_Year!" + "-" + "!_Month!" + "-" + "!_Day!"'
        #             arcpy.CalculateField_management(projectedAvyOutPointClass, "StdDate", StdDateExpression03,
        #                                             "PYTHON3", "", "DATE")
        #         cursor.updateRow(row)
        #
        # with arcpy.da.UpdateCursor(fc, fields) as cursor:
        #     for row in cursor:
        #         if row[0] > 9 and row[1] < 10:
        #             StdDateExpression04 = '"!_Year!" + "-" + "!_Month!" + "-" + "0" + "!_Day!"'
        #             arcpy.CalculateField_management(projectedAvyOutPointClass, "StdDate", StdDateExpression04,
        #                                             "PYTHON3", "", "DATE")
        #         cursor.updateRow(row)

        print("fields updated")

        # clip avy features
        arcpy.Clip_analysis(projectedAvyOutPointClass, projectBoundary, avyPointClipped)
        print("clipped avy feature")

        # delete working files
        arcpy.Delete_management([outAvyPointClass, projectedAvyOutPointClass])
        print("memory classes deleted")
    except Exception as ex:
        print(ex)
except Exception as ex:
    print(ex)
